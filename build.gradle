/*
 * Copyright 2018 Kaidan Gustave
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.apache.tools.ant.filters.ReplaceTokens

class Version {
    String major, minor, patch, buildNo

    String implementation() {
        return "${major}.${minor}.${patch}"
    }

    String specification() {
        return "${major}.${minor}"
    }

    @Override
    String toString() {
        return "${implementation()}_${buildNo}"
    }
}

buildscript {
    ext {
        kotlin_version = properties['kotlin_version']
    }

    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junit_version"
        classpath "com.github.jengelman.gradle.plugins:shadow:$shadow_version"
        classpath "com.github.ben-manes:gradle-versions-plugin:$versions_version"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintray_version"
    }
}

def ver = new Version(major: '1', minor: '0', patch: '0', buildNo: '1')

allprojects {
    group 'me.kgustave'
    version "$ver"

    project.ext {
        automaticModuleName = project == rootProject? project.name.toLowerCase() :
                "${rootProject.name.toLowerCase()}.${project.name.toLowerCase()}"

        projectName = automaticModuleName.replaceAll('.', '-')
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.github.ben-manes.versions'

archivesBaseName = "${group}.dkt"

sourceCompatibility = 1.8

sourceSets {
    test {
        java.srcDirs += 'src/test/java'
        kotlin.srcDirs += 'src/test/kotlin'

        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

configurations {
    components {
        transitive = true
    }
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile "org.slf4j:slf4j-api:$slf4j_version"
    compile "com.squareup.okhttp3:okhttp:$okhttp_version"
    compile "com.neovisionaries:nv-websocket-client:$nv_websocket_version"
    compile "me.kgustave:kotlin-json-core:$kotlin_json_version"

    compileOnly "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    compileOnly "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"

    testCompile "ch.qos.logback:logback-classic:$logback_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testCompile "org.junit.jupiter:junit-jupiter-api:$jupiter_version"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:$jupiter_version"
}

task sourcesForRelease(type: Copy) {
    from 'src/main'
    into 'build/filteredSrc'
    filter(ReplaceTokens, tokens: [
            versionMajor:    ver.major.toString(),
            versionMinor:    ver.minor.toString(),
            versionRevision: ver.patch.toString(),
            versionBuild:    ver.buildNo.toString()
    ])
}

kotlin {
    experimental {
        coroutines = property("kotlin.experimental.coroutines")
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

jar {
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': ver.implementation(),
                'Implementation-Vendor': 'kgustave.me',

                'Specification-Title': project.name,
                'Specification-Version': ver.specification(),
                'Specification-Vendor': 'kgustave.me',

                'Automatic-Module-Name': automaticModuleName,
                'Kotlin-Version': Arrays.copyOf(kotlin_version.split('\\.'), 2).join('.')
        )
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    group 'build'
    description 'Assembles a sources jar'

    classifier 'sources'
    from 'src/main/kotlin'
}

build {
    dependsOn clean
    dependsOn jar
    dependsOn sourcesJar
    dependsOn shadowJar

    sourcesJar.mustRunAfter clean
    jar.mustRunAfter sourcesJar
    shadowJar.mustRunAfter jar
}

bintray {
    user = findProperty('bintrayUsername')
    key = findProperty("bintrayApiKey")

    publications = ['BintrayRelease']
    publish = true

    pkg {

        repo = 'maven'
        name = 'kotlin-json'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/TheMonitorLizard/Discord.kt/'
        githubRepo = 'https://github.com/TheMonitorLizard/Discord.kt/'

        version {
            name = project.version
            released = new Date()
        }
    }
}

publishing {
    publications {
        //noinspection GrUnresolvedAccess
        BintrayRelease(MavenPublication) {
            from components.java

            groupId project.group
            artifactId project.projectName
            version version

            artifact sourcesJar
        }
    }
}

wrapper {
    gradleVersion '4.6'
}

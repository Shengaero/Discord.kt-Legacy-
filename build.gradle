/*
 * Copyright 2018 Kaidan Gustave
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Version {
    String major, minor, patch, buildNo

    String implementation() {
        return "${major}.${minor}.${patch}"
    }

    @Override
    String toString() {
        return "${implementation()}_${buildNo}"
    }
}

buildscript {
    ext.kotlin_version = '1.2.21'

    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        //classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.9"
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.1"
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'kotlin'
//apply plugin: 'org.jetbrains.dokka'
apply plugin: 'com.github.johnrengelman.shadow'

def ver = new Version(major: '1', minor: '0', patch: '0', buildNo: '1')

group 'me.kgustave'
version ver.toString()
archivesBaseName = "${group}.dkt"

sourceCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://dl.bintray.com/kaidangustave/maven/" }
}

sourceSets {
    test.kotlin.srcDirs += 'src/test/kotlin'

    test {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

dependencies {
    compile "org.slf4j:slf4j-api:1.7.25"
    compile "com.squareup.okhttp3:okhttp:3.9.1"
    compile "com.neovisionaries:nv-websocket-client:2.2"
    compile "org.apache.commons:commons-collections4:4.1"
    compile "me.kgustave:KSON-jvm:0.6"

    compileOnly "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.21.2"
    compileOnly "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    testCompile "junit:junit:4.12"
    testCompile "ch.qos.logback:logback-classic:1.2.3"
}

jar {
    manifest {
        attributes 'Implementation-Version': ver.implementation(),
                'Manifest-Version': ver.toString(),
                'Kotlin-Version': kotlin_version
    }
}

/*task kdoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    logging.level = LogLevel.QUIET
    outputFormat = 'html'
    outputDirectory = "$buildDir/kdoc"
}

task kdocJar(type: Jar, dependsOn: kdoc) {
    baseName = archivesBaseName
    classifier = 'javadoc'
    from kdoc.outputDirectory
}*/

kotlin {
    experimental {
        coroutines = 'ENABLE'
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

build {
    dependsOn clean
    dependsOn jar
    dependsOn classes
    //dependsOn kdocJar
    dependsOn shadowJar

    classes.mustRunAfter clean
    jar.mustRunAfter classes
    //kdocJar.mustRunAfter jar
    shadowJar.mustRunAfter jar //kdocJar
}

wrapper {
    gradleVersion = '4.3.1'
}
